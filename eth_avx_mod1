// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Crowdfunding {
    address public campaignCreator;
    uint256 public fundraisingGoal;
    uint256 public totalFundsRaised;

    enum CampaignState { Active, Successful, Expired }

    CampaignState public state;

    constructor(uint256 _goal) {
        campaignCreator = msg.sender;
        fundraisingGoal = _goal;
        state = CampaignState.Active;
    }

    modifier onlyCreator() {
        require(msg.sender == campaignCreator, "Only the campaign creator can call this function");
        _;
    }

    modifier campaignActive() {
        require(state == CampaignState.Active, "Campaign must be active");
        _;
    }

    function contribute() external payable campaignActive {
        totalFundsRaised += msg.value;
    }

    function checkGoalReached() external onlyCreator {
        require(state == CampaignState.Active, "Campaign must be active");
        
        if (totalFundsRaised >= fundraisingGoal) {
            state = CampaignState.Successful;
        } else {
            state = CampaignState.Expired;
        }
    }

    function withdrawFunds() external onlyCreator {
        require(state == CampaignState.Successful, "Campaign must be successful to withdraw funds");
        
        // Perform withdrawal
        bool success = payable(campaignCreator).send(totalFundsRaised);
        require(success, "Withdrawal failed");
        
        // Reset state and funds for potential future campaigns
        state = CampaignState.Expired;
        totalFundsRaised = 0;
    }
}
